require 'optparse'
require 'drupal_reader'
require 'wxr_writer'
require 'drupal_to_wxr_converter'
require 'drupal_model'
require 'conversion_logger'

MIGRATED_CAT_NAME = "Migrated from Drupal"
MIGRATED_CAT_NICE_NAME = "migrated_from_drupal"


def parse_cmdline
    opts = {
        :dbhost => nil,
        :dbusername => nil,
        :dbpassword => nil,
        :dbname => nil,
        :baseurl => nil,
        :lang => nil,
        :outdir => "./drupal2wrx-#{Time.new.strftime('%Y-%m-%d-%H-%M-%S')}",
        :comments_open => true,
        :pings_open => true,
        :drupal_files_path => nil,
        :disqus_comments_file => nil
    }
    
    opt_parser = OptionParser.new
    
    opt_parser.on("-h HOSTNAME", 
        "--dbhost HOSTNAME", 
        "Sets the hostname of the MySQL database to connect to") {|val| 
            opts[:dbhost] = val
        }
    
    opt_parser.on("-u USERNAME", 
        "--dbusername USERNAME", 
        "Sets the username of the MySQL database to connect to") {|val| 
            opts[:dbusername] = val
        }
    
    opt_parser.on("-p PASSWORD", 
        "--dbpassword PASSWORD", 
        "Sets the password of the MySQL database to connect to") {|val| 
            opts[:dbpassword] = val
        }
    
    opt_parser.on("-n DBNAME", 
        "--dbname DBNAME", 
        "Sets the name of the MySQL database to connect to") {|val| 
            opts[:dbname] = val
        }
    
    opt_parser.on("-b BASEURL", 
        "--baseurl BASEURL", 
        "Sets the base URL (WITHOUT trailing slash) of the Drupal site being migrated") {|val| 
            opts[:baseurl] = val
        }
    
    opt_parser.on("-l", 
        "--language LANG", 
        "Sets the value of the language attribute in the output.  Defaults to your site's default locale") {|val| 
            opts[:lang] = val
        }
    
    opt_parser.on("-o", 
        "--outdir DIR", 
        "The path of the output files generated by the migration.") {|val| 
            opts[:outdir] = val
        }
    
    opt_parser.on("", 
        "--disable-comments", 
        "Disable comments on migrated posts.  By default posts will migrate with comments open") {
            opts[:comments_open] = false
        }
    
    opt_parser.on("", 
        "--disable-pings", 
        "Disable pings on migrated posts.  By default posts will migrate with pings open") {
            opts[:pings_open] = false
        }
    
    opt_parser.on("-d", 
        "--drupal-files-path PATH", 
        "The path on the machine hosting WordPress where the drupal 'files' folder has been copied.") {|val| 
            opts[:drupal_files_path] = val
        }
    
    opt_parser.on("-c", 
        "--disqus-comments-file PATH", 
        "The path and file name of the XML file containing exported Disqus comments to be included in the migration.") {|val| 
            opts[:disqus_comments_file] = val
        }

    begin
        remaining_args = opt_parser.parse(ARGV)
    rescue OptionParser::ParseError
        puts $!
        puts opt_parser
        exit(-1)
    end

    if remaining_args.length > 0
        remaining_args.each do |arg|
            puts "Unrecognized argument '#{arg}'"
        end
        exit(-1)
    end

    if !opts[:dbhost]
        puts "You must specify a database host"
        exit(-1)
    end

    if !opts[:dbusername]
        puts "You must specify a database username"
        exit(-1)
    end

    if !opts[:dbpassword]
        puts "You must specify a database password"
        exit(-1)
    end

    if !opts[:dbname]
        puts "You must specify a database name"
        exit(-1)
    end

    if !opts[:baseurl]
        puts "You must specify a base URL"
        exit(-1)
    end

    if !opts[:drupal_files_path]
        puts "You must specify a drupal files path"
        exit(-1)
    end

    opts
end

if $KCODE != "UTF8"
    puts "$KCODE is set to '#{$KCODE}', not UTF8.  Re-run this script with the -Ku switch passed to the ruby executable"
    exit(-1)
end

opts = parse_cmdline()

ConversionLogger.do_conversion({:logdir => opts[:outdir]}) do |logger|
    reader = DrupalReader.new(opts[:dbhost],
        opts[:dbusername],
        opts[:dbpassword],
        opts[:dbname],
        opts[:baseurl],
        opts[:disqus_comments_file]
        logger)

    if !File.exists?(opts[:outdir])
        Dir.mkdir(opts[:outdir])
    end

    logger.log_info "Migrating site #{reader.title}..."

    wxr_file = File.join(opts[:outdir], "drupal.wxr")

    logger.log_info "Generating #{wxr_file}..."

    puts "Starting node conversion..."

    File.open(wxr_file,  "w") do |file|
        writer = WxrWriter.new(file)
        converter = DrupalToWxrConverter.new(writer, 
            reader,
            logger,
            opts
            )
        converter.run
    end

    logger.log_info "Done writing #{wxr_file}"

    puts "Conversion complete; results written to #{logger.index_filename}"
end

